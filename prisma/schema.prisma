generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  PLAYER
  ADMIN
}

enum Lang {
  th
  en
}

enum Category { 
  HEALTH
  COGNITION
  DIGITAL
  FINANCE
}

enum QType {
  MISSING_NUTRIENT
  NUTRIENT_FROM_IMAGE
  DISEASE_FROM_IMAGE
  ILLEGAL_TEXT
  ODD_ONE_OUT
  APP_IDENTITY
  SCAM_TEXT
  DONT_SHARE
  ARITHMETIC_TARGET
  MAX_VALUE_STACK
}

enum InputType {
  TEXT
  MULTIPLE_CHOICE_4
  MULTIPLE_CHOICE_3
  CALCULATION
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  username     String        @unique
  passwordHash String
  role         Role          @default(PLAYER)
  preferredLang Lang         @default(th)
  isActive     Boolean       @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  profile      Profile?
  sessions     Session[]
  gameResults  GameResult[]
  achievements Achievement[]
  
  @@map("users")
}

model Profile {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique @db.ObjectId
  displayName  String
  avatar       String?
  totalScore   Int      @default(0)
  gamesPlayed  Int      @default(0)
  
  healthMastery    Int @default(0)
  cognitionMastery Int @default(0)
  digitalMastery   Int @default(0)
  financeMastery   Int @default(0)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("profiles")
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("sessions")
}

model Question {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  category     Category
  type         QType
  inputType    InputType
  difficulty   Int             @default(1)
  isActive     Boolean         @default(true)
  createdAt    DateTime        @default(now())
  
  translations QuestionTranslation[]
  gameQuestions GameQuestion[]
  
  @@index([category, isActive])
  @@map("questions")
}

model QuestionTranslation {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  questionId     String   @db.ObjectId
  lang           Lang
  questionText   String
  imageUrl       String?
  options        String[]
  correctAnswers String[]
  targetValue    Int?
  explanation    String?
  
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  @@unique([questionId, lang])
  @@map("question_translations")
}

model GameResult {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  userId         String         @db.ObjectId
  category       Category
  score          Int            @default(0)
  totalQuestions Int
  correctAnswers Int            @default(0)
  timeSpent      Int            @default(0)
  isCompleted    Boolean        @default(false)  // ⭐ เพิ่ม field นี้
  completedAt    DateTime       @default(now())
  
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameQuestions  GameQuestion[]
  
  @@index([userId, category])
  @@index([category, score])
  @@map("game_results")
}

model GameQuestion {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  gameResultId String     @db.ObjectId
  questionId   String     @db.ObjectId
  userAnswer   String?
  isCorrect    Boolean
  timeSpent    Int        

  gameResult   GameResult @relation(fields: [gameResultId], references: [id], onDelete: Cascade)
  question     Question   @relation(fields: [questionId], references: [id])
  
  @@map("game_questions")
}

model Achievement {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  type         String   
  category     Category?
  isCompleted  Boolean  @default(false)
  unlockedAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, type, category])
  @@map("achievements")
}